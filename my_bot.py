from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from data_manager import load_users, increment_message_count, register_user
from weather_api import get_weather
from currency_api import get_currency
from dotenv import load_dotenv
import logging
import sys
import os

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler(sys.stdout)                 # –ò –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")


# async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     # if "help" in update.callback_query.data:
#     #     await update.callback_query.edit_message_text("–¢—É—Ç –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")
#     # elif "about" in update.callback_query.data:
#     #     await update.callback_query.edit_message_text("–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
#     # await update.callback_query.answer()


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # help_button = InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data = "help")
    # about_button = InlineKeyboardButton("–û –±–æ—Ç–µ", callback_data = "about")

    user = update.message.from_user
    is_new = register_user(user.id, user.username, user.first_name)

    welcome = f"–ü—Ä–∏–≤–µ—Ç {user.first_name}, —Ä–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è! üëã" if is_new else f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {user.first_name}! üëã"

    reply_keyboard = ReplyKeyboardMarkup([
        ["–ü–æ–≥–æ–¥–∞ üå§Ô∏è", "–ö—É—Ä—Å –≤–∞–ª—é—Ç üí∞"],
        ["–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ üé≤"], ["–ü–æ–∫–∞–∑–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]
    ],resize_keyboard=True)

    # inline_keyboard = InlineKeyboardMarkup([
    #     [help_button],
    #     [about_button]
    # ])
    # await update.message.reply_text(f"{welcome} –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)
    await update.message.reply_text(f"{welcome}", reply_markup=reply_keyboard)


async def show_main_keyboard(update: Update):
    reply_keyboard = ReplyKeyboardMarkup([
        ["–ü–æ–≥–æ–¥–∞ üå§Ô∏è", "–ö—É—Ä—Å –≤–∞–ª—é—Ç üí∞"],
        ["–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ üé≤"],["–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]
    ], resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: ",reply_markup=reply_keyboard)



async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_text = update.message.text
    user_text_lower = user_text.lower()
    increment_message_count(user.id)


    users = load_users()
    user_id_str = str(user.id)

    if user_id_str not in users:
        await start_command(update, context)
        return

    if user_text == "–ü–æ–≥–æ–¥–∞ üå§Ô∏è":
        weather_keyboard = ReplyKeyboardMarkup([
            ["–ú–æ—Å–∫–≤–∞"],
            ["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]
        ], resize_keyboard=True)
        await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É?", reply_markup=weather_keyboard)
    elif user_text == "–ú–æ—Å–∫–≤–∞":
            await update.message.reply_text(await get_weather(user_text))
            await show_main_keyboard(update)
    elif user_text == "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥":
        await update.message.reply_text(await get_weather(user_text))
        await show_main_keyboard(update)
    elif user_text == "–ö—É—Ä—Å –≤–∞–ª—é—Ç üí∞":
        currency_keyboard = ReplyKeyboardMarkup([
            ["–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üíµ"],
            ["–ö—É—Ä—Å –µ–≤—Ä–æ üí∂"]
        ], resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:", reply_markup=currency_keyboard)
    elif user_text == "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üíµ":
        await update.message.reply_text(await get_currency(user_text))
        await show_main_keyboard(update)
    elif user_text == "–ö—É—Ä—Å –µ–≤—Ä–æ üí∂":
        await update.message.reply_text(await get_currency(user_text))
        await show_main_keyboard(update)
    elif user_text == "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ üé≤":
        import random
        number = random.randint(1,100)
        await update.message.reply_text(f"–¢–≤–æ–µ —á–∏—Å–ª–æ: {number}")
    elif "–ø—Ä–∏–≤–µ—Ç" in user_text_lower:
        await update.message.reply_text("–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üëã")
    elif "–∫–∞–∫ –¥–µ–ª–∞" in user_text_lower:
        await update.message.reply_text("–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?")
    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ —É–º–µ—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π /help")


def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))

    # application.add_handler(CallbackQueryHandler(button_click))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")


    application.run_polling()


if __name__ == "__main__":
    main()

